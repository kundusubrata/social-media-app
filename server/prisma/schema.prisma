generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  username   String     @unique
  email      String     @unique
  password   String
  profilePic String?
  bio        String?
  posts      Post[]
  comments   Comment[]
  likes      Like[]
  dislikes   Dislike[]
  following  Follower[] @relation("Following")
  followers  Follower[] @relation("Followers")
  createdAt  DateTime   @default(now())
  deletedAt  DateTime?
}

model Post {
  id            String    @id @default(uuid())
  content       String?
  imageUrl      String?
  imagePublicId String?
  videoUrl      String?
  videoPublicId String?
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String
  comments      Comment[]
  likes         Like[]
  dislikes      Dislike[]
  createdAt     DateTime  @default(now())
  deletedAt     DateTime?
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId]) // Prevent duplicate likes
}

model Dislike {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId]) // Prevent duplicate dislikes
}

model Follower {
  id          String   @id @default(uuid())
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId]) // Prevent duplicate follow records
}
